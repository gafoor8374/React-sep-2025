Episode 1:

In first I have create basic html hello world.
after that I have create basic javascript to run the hello world.

Ex: 
<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚ù§Ô∏èLearning New Reactüòú</title>
</head>
<body>
    <div id ="root">
        <!-- <h1>Hello World! from basic htmlü§©.</h1>
         <script>

            const heading = document.createElement("h1");
            heading.innerHTML = "Hello world! from JavaScriptüèÉüèΩ";

            const root = document.getElementById("root");
            root.appendChild(heading);
         </script>
    </div>
</body>
</html> -->

Now I have insert a react into our project
How to inject react into my project, so I have to using a CDN links copy and paste the CDN react links react will be into our project.

Below are the CDN links:
<!-- <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script> -->

This links have react and react-dom development.js then we using react now.

first link we have core function of the react [text](https://unpkg.com/react@18/umd/react.development.js)
Second link we manupulate the core function into the react [text](https://unpkg.com/react-dom@18/umd/react-dom.development.js)

What is react?
React is javascript library is end of the day.
it's Normal javascript files.

What is react-dom?
ReactDOM is a core library in the react tools to ineract with the browser's document Object Model(DOM).

ReactDOM is a core library in the React ecosystem that provides the necessary tools to interact with the browser's Document Object Model (DOM). While React itself is a JavaScript library for building user interfaces and can be used in various environments (like web, native mobile with React Native, or VR with React 360), ReactDOM specifically handles the rendering of React components into a web browser's DOM.

What is crossorgin?

Cross means interaction b/w the different domains.

Example of a Cross-Origin Request
Imagine your web application is on my-app.com, and you want to load a font from a different domain, like cdn.fonts.com. This is a cross-origin request. Without CORS headers from cdn.fonts.com, the browser would block the font from loading to prevent potential misuse.  


where to use react ?
React is using a creating something like element.
 1.how to create a element in react
 In React we are using create a element like React.creatElement here we passing 3 parameter create a react object
   1. what is creating like 'div', 'h1' tags etc.
   2. empty object {}, in this empty object we are passing attributes tags id, name css file etc. {id:"heading"}
   3. third parameter is passing a innerHTML like "Hello world!".

EX:- const heading = React.createElment("h1", {}, "Hello world!) --> finally it return a javascrit object


where to use react-dom?
ReactDOM is using for render a elements like root.render

In ReactDOM using render for elments into the root

EX:- const root = ReactDOM.createRoot(document.getElmentById("root"));
     root.render(heading); 

/**
 * 
 * <div id = "parent">
 *    <div id = "child">
 *     <h1>I am h1 tag</h1>
 *     <h2>I am h1 tag</h2>
 *   </div>
 * <div id = "child2">
 *     <h1>I am h1 tag</h1>
 *     <h2>I am h1 tag</h2>
 *   </div>
 * </div>
 * 
 * 
 * 
 * 
 * 
 */



EPISODE 02:-
how to push a code into the git?
first we need to create repo into the git
after we following below steps
git add README.md
git init
git branch -M main
git commit -m "first commit"
git add .
git remote add origin https://github.com/gafoor8374/React-sep-2025.git
git push -u origin main

already git repo
then you need following steps
git init
git commit -m "commitmeaage"
git add .
git push -u origin main


what is NPM ?
NPM is not particular name, but it is manages packages.

we need npm init then it will be add a package.json in our project.
In package.json is manages the what packages and what dependency of the packages into the our project

how to install packages?
 -- npm install -D parcel --
one is dev dependecy
another is normal dependency

what is the package.json?
package.json is the configuration of the package and that version.
like:"parcel": "^2.16.0" here we are updating when ever install our NPM into the our project 

what is the package-lock.json?
package-lock.json is the keep track a exact version of the dependency of the packages.
like: 
"parcel": "^2.16.0"

what is caret and tlide?
Caret is " ^ " the increasing or updated automatically the minor or major versions of the packages.
tlide is " ~ "  not updating anything it's standarad major version saving what ever into the package.json .

what is the integrity?
In a package-lock.json file, the integrity field holds a cryptographic hash (like SHA512) of a package's downloaded tarball or the commit hash for a Git dependency.
Hashing: When a package is fetched from a registry, local source, or Git repository, a hash is generated for that specific file or commit. 

what is trangentive dependency?
Tragentive dependency means, if we are install one package like parcel, parcel will be automatically install other libraries, there own dependency like this way their own dependency have own dependenices install like all data into the node modules.

how run a parcel?
npx parcel index.html normal dev build
npm parcel build index.html production build


EPISODE03:-
We are implement the scripts for the project in production and local machines
How to implement the package.json?
In package.json there is a scripts we need to implement the production and local dev mode
EX:- here key and value will be placed in scripts here is the industry standared
"scripts": {
    "start": "parcel index.html",
    "build": "parcel build index.html" 
  },
  once run the build
   1. npm start or npm run start
   2. npm run build is here run will added then it will build.

React.createElement create a object => after render into the ReactDOM then it will be html elemnt

EX:-
<!-- const parent = React.createElement("div", { id: "parent" }, [
    React.createElement("div", { id: "child", key:"childkey" }, [
    React.createElement("h1",{id:"h1tag", key:"h1key"}, "I am an h1 tag"),
    React.createElement("h2", {id:"h2tag", key:"h2key"}, "I am an h2 tag"),
  ]),
  React.createElement("div", { id: "child2", key:"child2key" }, [
    React.createElement("h1",{id:"h1tag", key:"h1key"}, "I am an h1 tag"),
    React.createElement("h2", {id:"h2tag", key:"h2key"}, "I am an h2 tag"),
  ])
]

);

console.log(parent);

const root = ReactDOM.createRoot(document.getElementById("root"));

root.render(parent); -->

--JSX--
JSX is not HTML inside JS, but JSX HTML or XML likes syntax

<!-- const jsxheading = <h1 clasName="head">Learning react ü•∞</h1> -->
Here attributes the passing camelcase

JSX => BABEL is transfiled into the React.createElement => js object => render HTML element

## React Component
1. Class Based Component => Old way
2. Functional Component => New way

React Functional Component 
It is normal JS function which return some JSX

<!-- const HeadingComponent = () ={
    return <h1>Learning form function Component </h1>
} -->

how to render a component?
In functional component is rendering like this syntax:
EX: root.render(<HeadingComponent />)

What is component composition?
Component compostion is there is render a one component into another component.

<!-- const HeadingComponent = () =>(
   <h1 id="heading">Learning React from JSX ü•∞</h1>
);

const HeadingComponent2= () =>(
   <div id="container">
    <HeadingComponent />. here the Component Compostion
    <h1 className ="heading">This is a Functional Component</h1>;
   </div>
) -->

how to react elment inside the component?

const HeadingComponent = (
   <h1 id="heading">Learning React from JSX ü•∞</h1>
);

const HeadingComponent2= () =>(
   <div id="container">
    { HeadingComponent } // here the React elemnent Compostion into the componnet 
    In this bracket we are doing what ever js
    <h1 className ="heading">This is a Functional Component</h1>;
   </div>
) 



EPISODE04:-

Build a project then plan first how to build app strudture need be imporatant
<!--
*Header
 * logo
 * Nav items
*Body
 * Search
 * ResturantContainer
  * RestroCard
   - image
   - Resturant Name, star rating, cuisine, time, rate etc

*Footer 
 * copy
 * links
 -->

In react props will pass something.

We will pass the arugument in dynamically through the component is called props
EX: <ResturantCardList resname="Madhuram Tiffins" cusine="south Indian, BHEL" /> resname, cusine are props passing to the dynamically to the components.

Passing a arrugument it wraping it like props

props will be disructring like it

const List = (props) =>{
   here the props are to object coming form resname, cusine etc.

   console.log(props);

   de-struting the props 

   const {resname, cuisine } = props;
 return (
     <h1>{props.resname}</h1>

     when destruting using like this

     <h2>{resname}</h2>
 )
}

<ResturantCardList resname="Madhuram Tiffins" cusine="south Indian, BHEL" />

const ResturantCardList = (props) =>{
   // console.log(props);

   const {resname, cusines, rating} = props; //destructuring
   return (
      <div className="res-card">
         <img className="res-logo" src="https://media-assets.swiggy.com/swiggy/image/upload/fl_lossy,f_auto,q_auto,w_660/FOOD_CATALOG/IMAGES/CMS/2024/11/8/3b73a883-2a17-4756-a695-ea7fa84a1831_e753c47a-ee2a-4d53-a484-a78ee939e7b5.jpeg" />
         <h3>{resname}</h3>
         <h4>{cusines}</h4>
         <h4>{rating}</h4>
         <h4>{props.time}</h4>

      </div>
   )
}

What is config drivine UI?
 data will drivine by config with different location control by then called config drivin UI.

 When were use .map for array paasing key value.

 <div className="res-container">
            {/* resturant list */}
            {/* <ResturantCardList resData ={resList[0]}/>
            <ResturantCardList resData ={resList[1]}/>
            <ResturantCardList resData ={resList[2]}/>
            <ResturantCardList resData ={resList[3]}/> */} {/*//Dynamic way to do it */}

            {/* {Using to map for resturant list} */}
            {resList.map((resturant) =>{
               return <ResturantCardList key= {resturant.card.card.info.id} resData = {resturant} />
            })}
            
         </div>


EPISODE05:-

React builds makes large scale application
Make seperate files for every component.
First export after import

There is two type of import and export
## default Export/Import
export default => export deafult Header;
import Componet or function  from "path";

## Named Export/ Import
export const componnet or function;
import {component or function} from "path"
 named export => export const variable or function



## Hooks ##
They are normal js utilities function

There us two imporant hooks
1. useState()
2. useEffect()

const [listOfResturant] = useState(); this is local state variable

let listOfResturant; this normal variable

## useState() ##
When ever State variable is update ract will be automatically re-render the component UI.

React use Reconciliation algorithm(React Fiber) 16th version

Virtual Dom => it is not a normal DOM, it's representation of a original DOM

Diff Algorithm => it's means

import ResturantCardList from "./ResturantCardList";
// import resList from "../Utilis/mockdata";
import { useState } from "react";


const Body = () =>{

   const [listOfResturants, setListOfResturants] = useState([{
    card: {
      card: {
        info: {
          id: "160087",
          name: "Varalakshmi Tiffins",
          cloudinaryImageId:
            "FOOD_CATALOG/IMAGES/CMS/2024/6/13/f75ee7b6-e503-450a-927b-4127ff08b728_d96ddc6b-5a48-4c4b-a413-c92e44355f0d.jpg",
          costForTwo: "‚Çπ300 for two",
          cuisines: ["South Indian"],
          avgRating: 4.5,
          sla: {
            deliveryTime: 27,
            lastMileTravel: 5.8,
            serviceability: "SERVICEABLE",
            slaString: "25-30 mins",
            lastMileTravelString: "5.8 km",
            iconType: "ICON_TYPE_EMPTY",
          },
        },
      },
    },
  },
  },])


   return (
     <div className="body">
       {/* <div className="search">Search</div> */}
       <div className="filter">
         <button
           className="filter-btn"
           onClick={() => {
              let filterResturants = listOfResturants.filter((res)=>res.card.card.info.avgRating > 4)
              console.log(listOfResturants);
              setListOfResturants(filterResturants);
            }
           }
         >
           Fillter Restaurants
         </button>
       </div>

       <div className="res-container">
         {listOfResturants.map((resturant) => {
           return (
             <ResturantCardList
               key={resturant.card.card.info.id}
               resData={resturant}
             />
           );
         })}
       </div>
     </div>
   );
}

export default Body;
